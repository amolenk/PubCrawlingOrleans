@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject PubCrawlService PubCrawlService
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

 <div id="map" style="height: 750px; width: 100%; background-color: red;"></div>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private DotNetObjectReference<Index> dotNetObjectReference;

    protected override async Task OnInitializedAsync()
    {
        @* await JSRuntime.InvokeVoidAsync("initializeMap"); *@

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:5001/geohub")
            .Build();

        // TODO Make sure map is rendered before calling this
        hubConnection.On<string, int>("OnVenueAttendanceUpdated", (venueId, attendance) =>
        {
            JSRuntime.InvokeVoidAsync("updateMarkerAttendance", venueId, attendance);
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var data = await PubCrawlService.GetVenuesAsync();
    
            dotNetObjectReference = DotNetObjectReference.Create(this);

            await JSRuntime.InvokeVoidAsync("initializeMap", data, dotNetObjectReference);
        }
    }    

    [JSInvokable]
    public Task OnVenueClicked(string venueId)
    {
        Navigation.NavigateTo($"/venues/{venueId}");
        return Task.CompletedTask;
    }

    private async Task Send()
    {
        if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        if (dotNetObjectReference is not null)
        {
            dotNetObjectReference.Dispose();
        }
    }
}