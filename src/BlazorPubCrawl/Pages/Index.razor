@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject PubCrawlService PubCrawlService
@implements IAsyncDisposable

<PageTitle>Pub Crawl</PageTitle>

<div class="container">
    <h1>Pub Crawl! 🗺️</h1>

     <div id="map"></div>
</div>

<div class="container">
    <h1 @onclick="RefreshBeerLeaderboardAsync">Top Beers 🍻</h1>

    <ul class="beer-list">
        @foreach (var beer in _beerLeaderboard)
        {
            <li class="beer-item">
                <div class="beer-info">
                    <h4>@beer.Brewery</h4>
                    <h2>@beer.Name <span>@(beer.Abv)%</span></h2>
                </div>
                <div>
                    <p class="beer-rating">@(string.Empty.PadRight(beer.Score, '\u2B50'))</p>
                </div>
            </li>
        }
    </ul>
</div>


@code {
    private HubConnection? hubConnection;
    private DotNetObjectReference<Index>? dotNetObjectReference;
    private Dictionary<string, Beer> _beers = new();
    private List<BeerHighscore> _beerLeaderboard = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:5001/eventmaphub")
            .Build();

        hubConnection.On<string, string, int>("OnVenueAttendanceUpdated", (eventId, venueId, attendance) =>
        {
            // Ignore the event id for now, we only have one event
            JSRuntime.InvokeVoidAsync("updateMarkerAttendance", venueId, attendance);
        });

        await hubConnection.StartAsync();

        _beers = (await PubCrawlService.GetBeerSelectionAsync())
            .ToDictionary(b => b.Id);

        await RefreshBeerLeaderboardAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var data = await PubCrawlService.GetVenuesAsync();

            if (data.Any())
            {
                dotNetObjectReference = DotNetObjectReference.Create(this);

                await JSRuntime.InvokeVoidAsync("initializeMap", data, dotNetObjectReference);
            }
        }
    }    

    [JSInvokable]
    public Task OnVenueClicked(string venueId)
    {
        Navigation.NavigateTo($"/venues/{venueId}");
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        if (dotNetObjectReference is not null)
        {
            dotNetObjectReference.Dispose();
        }
    }

    private async Task RefreshBeerLeaderboardAsync()
    {
        _beerLeaderboard = (await PubCrawlService.GetBeerLeaderboardAsync())
            .Select(b =>
            {
                var beer = _beers[b.Key];
                return new BeerHighscore(
                    beer.Id,
                    beer.Name,
                    beer.Brewery,
                    beer.Style,
                    beer.Abv,
                    b.Value);
            })
            .ToList();
    }
}